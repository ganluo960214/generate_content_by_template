package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	"go/format"
	"io/fs"
	"log"
	"os"
	"text/template"
)

var flags = struct {
	OutputFile   string
	TemplateFile string
	Json         string
}{}

func init() {
	flag.StringVar(&flags.OutputFile, "output-file", "", "prefix output file")
	flag.StringVar(&flags.TemplateFile, "template-file", "", "prefix template file")
	flag.StringVar(&flags.Json, "json", "", "if template need var")
	flag.Parse()
}

func main() {

	f := interface{}(nil)
	if err := json.Unmarshal([]byte(flags.Json), &f); err != nil {
		log.Fatal(err)
	}

	tf, err := template.ParseFiles(flags.TemplateFile)
	if err != nil {
		log.Fatal(err)
	}

	s := fmt.Sprintf("// Code generated by \"generate_content_by_template -output-file %s -template-file %s -json %s\"; DO NOT EDIT.\n", flags.OutputFile, flags.TemplateFile, flags.Json)
	b := bytes.NewBuffer([]byte(s))
	if err := tf.Execute(b, f); err != nil {
		log.Fatal(err)
	}

	bs, err := format.Source(b.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	outputFile, err := os.OpenFile(flags.OutputFile, os.O_CREATE|os.O_TRUNC, fs.ModePerm)
	if err != nil {
		log.Fatal(err)
	}
	if _, err := outputFile.Write(bs); err != nil {
		return
	}
}
